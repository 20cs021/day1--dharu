
reverse pairs:
class Solution {
 public int reversePairs(int[] nums){
        // Code here
        return mergeCount(nums,0,nums.length-1);

    }
    static int mergeCount(int[] nums,int low,int high){
        if(low >= high) return 0;
        int mid = (low + high) /2;
        int count = mergeCount(nums,low,mid);
        count += mergeCount(nums,mid+1,high);
        count += merge(nums,low,mid,high);
        return count;
    }
    static int merge(int[] nums,int low,int mid,int high){
        int count = 0,j=mid+1;
        for(int i = low;i<= mid;i++){
            while(j <= high && nums[i]>(2 *(long) nums[j])){
                j++;
            }
            count += (j - (mid +1));


        }
        ArrayList<Integer>temp=new ArrayList<Integer>();
        int left = low,right = mid +1;
        while(left <= mid && right <= high){
            if(nums[left] <= nums[right]){
                temp.add(nums[left++]);
            }else{
                temp.add(nums[right++]);
            }
        }
        while(left <= mid){
            temp.add(nums[left++]);
        }
        while(right <= high){
            temp.add(nums[right++]);
        }
        for(int i = low;i<=high;i++){
            nums[i] = temp.get(i-low);
        }
        return count;
    }

}
      ..........................................................................................................................
unique paths :

class Solution {
    
    public int uniquePaths(int m, int n) {
        int N = n+m-2;
        int r=m-1;
        double res =1;
        for(int i=1;i<=r;i++){
            res = res*(N-r+i)/i;
        }
    
        return (int)res;
    }
}